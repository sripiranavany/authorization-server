# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  actions: read
  security-events: write
  id-token: write

jobs:
  build:

    runs-on: ${{ matrix.os }}
    environment: Test Enviroment
    env:
      IMAGE_NAME: ${{ vars.AUTHORIZATION_SERVER_DOCKERHUB_IMAGE_NAME }}
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]

    steps:
    - uses: actions/checkout@v4
    - name: Create logs directory
      run: mkdir -p hms/logs/authorization-server
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn clean install --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@v4

    - name: Log in to Docker Hub
      if: matrix.os == 'ubuntu-latest'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      if: matrix.os == 'ubuntu-latest'
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        file: ./Dockerfile  

    - name: Verify Docker image
      if: matrix.os == 'ubuntu-latest'
      uses: docker/inspect-action@v1
      with:
        image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        format: 'Image {{.Id}} with OS {{.Os}} and Arch {{.Architecture}}'
        fail-if-missing: true
        fail-if-empty: true
        fail-if-contains: 'sha256:'
    
    - name: Push Docker image
      if: matrix.os == 'ubuntu-latest'
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest